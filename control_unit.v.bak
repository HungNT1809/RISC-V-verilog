module control_unit (
    input logic [6:0] opcode,
    output logic [1:0] alu_op,
    output logic [1:0] alu_src,
    output logic mem_to_reg,
    output logic reg_write,
    output logic mem_read,
    output logic mem_write,
    output logic branch,
    output logic jump,
    output logic [1:0] pc_src
);
    always_comb begin
        alu_op      = 2'b00;
        alu_src     = 2'b00;
        mem_to_reg  = 1'b0;
        reg_write   = 1'b0;
        mem_read    = 1'b0;
        mem_write   = 1'b0;
        branch      = 1'b0;
        jump        = 1'b0;
        pc_src      = 2'b00;

        case (opcode)
            7'b0110011: begin // R-type (add, sub, and, or, slt)
                alu_op      = 2'b10;
                alu_src     = 2'b00;
                reg_write   = 1'b1;
            end

            7'b0010011: begin // I-type (addi, etc.)
                alu_op      = 2'b10;
                alu_src     = 2'b01;
                reg_write   = 1'b1;
            end

            7'b0000011: begin // lw
                alu_op      = 2'b00;
                alu_src     = 2'b01;
                mem_to_reg  = 1'b1;
                reg_write   = 1'b1;
                mem_read    = 1'b1;
            end

            7'b0100011: begin // sw
                alu_op      = 2'b00;
                alu_src     = 2'b01;
                mem_write   = 1'b1;
            end

            7'b1100011: begin // beq, bne
                alu_op      = 2'b01;
                branch      = 1'b1;
                pc_src      = 2'b01;
            end

            7'b1101111: begin // jal
                alu_src     = 2'b01;
                reg_write   = 1'b1;
                jump        = 1'b1;
                pc_src      = 2'b01;
            end

            7'b1100111: begin // jalr
                alu_src     = 2'b01;
                reg_write   = 1'b1;
                jump        = 1'b1;
                pc_src      = 2'b10;
            end

            7'b0110111, // lui
            7'b0010111: begin // auipc
                alu_src     = 2'b01;
                reg_write   = 1'b1;
            end

            default: ; 
        endcase
    end
endmodule

